#
# General options
#

newlines                           = LF     # { Auto, LF, CR, CRLF } The type of line endings. Default=Auto.
# input_tab_size                     = 8      # The original size of tabs in the input. Default=8.
# output_tab_size                    = 4      # The size of tabs in the output (only used if align_with_tabs=true). Default=8.
string_replace_tab_chars           = True   # { False, True } Replace tab characters found in string literals with the escape sequence \t instead.
utf8_bom                           = Remove # { Ignore, Add, Remove, Force }  Control what to do with the UTF-8 BOM (recommend 'remove').
utf8_force                         = True   # { False, True } Force the output encoding to UTF-8.

#
# Spacing options
#

sp_arith                           = Force  # { Ignore, Add, Remove, Force } Add or remove space around arithmetic operator '+', '-', '/', '*', etc also '>>>' '<<' '>>' '%' '|'.
sp_assign                          = Force  # { Ignore, Add, Remove, Force } Add or remove space around assignment operator '=', '+=', etc.
sp_enum_paren                      = Force  # { Ignore, Add, Remove, Force } Add or remove space in 'NS_ENUM ('.
# sp_enum_assign                     = Force  # { Ignore, Add, Remove, Force } Add or remove space around assignment '=' in enum.
sp_enum_before_assign              = Add    # { Ignore, Add, Remove, Force } Add or remove space before assignment '=' in enum. Overrides sp_enum_assign.
sp_enum_after_assign               = Force  # { Ignore, Add, Remove, Force } Add or remove space after assignment '=' in enum. Overrides sp_enum_assign.
# sp_enum_colon                               # { Ignore, Add, Remove, Force } Add or remove space around assignment ':' in enum.
sp_pp_concat                       = Add    # { Ignore, Add, Remove, Force } Add or remove space around preprocessor '##' concatenation operator. Default=Add.
sp_pp_stringify                    = Remove # { Ignore, Add, Remove, Force } Add or remove space after preprocessor '#' stringify operator. Also affects the '#@' charizing operator.
sp_before_pp_stringify             = Remove # { Ignore, Add, Remove, Force } Add or remove space before preprocessor '#' stringify operator as in '#define x(y) L#y'.
sp_bool                            = Force  # { Ignore, Add, Remove, Force } Add or remove space around boolean operators '&&' and '||'.
sp_compare                         = Force  # { Ignore, Add, Remove, Force } Add or remove space around compare operator '<', '>', '==', etc.
sp_inside_paren                    = Remove # { Ignore, Add, Remove, Force } Add or remove space inside '(' and ')'.
sp_paren_paren                     = Remove # { Ignore, Add, Remove, Force } Add or remove space between nested parens: '((' vs ') )'.
sp_cparen_oparen                   = Remove # { Ignore, Add, Remove, Force } Add or remove space between back-to-back parens: ')(' vs ') ('.
# sp_balance_nested_parens                    # { False, True } Whether to balance spaces inside nested parens.
sp_paren_brace                     = Force  # { Ignore, Add, Remove, Force } Add or remove space between ')' and '{'.
sp_before_ptr_star                 = Force  # { Ignore, Add, Remove, Force } Add or remove space before pointer star '*'.
sp_before_unnamed_ptr_star         = Ignore # { Ignore, Add, Remove, Force } Add or remove space before pointer star '*' that isn't followed by a variable name. If set to 'ignore', sp_before_ptr_star is used instead.
sp_between_ptr_star                = Remove # { Ignore, Add, Remove, Force } Add or remove space between pointer stars '*'.
sp_after_ptr_star                  = Remove # { Ignore, Add, Remove, Force } Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star_qualifier        = Remove # { Ignore, Add, Remove, Force } Add or remove space after pointer star '*', if followed by a qualifier.
sp_after_ptr_star_func             = Remove # { Ignore, Add, Remove, Force } Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_ptr_star_paren                  = Remove # { Ignore, Add, Remove, Force } Add or remove space after a pointer star '*', if followed by an open paren (function types).
sp_before_ptr_star_func            = Force  # { Ignore, Add, Remove, Force } Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_byref                    = Force  # { Ignore, Add, Remove, Force } Add or remove space before a reference sign '&'.
sp_before_unnamed_byref            = Ignore # { Ignore, Add, Remove, Force } Add or remove space before a reference sign '&' that isn't followed by a variable name. If set to 'ignore', sp_before_byref is used instead.
sp_after_byref                     = Remove # { Ignore, Add, Remove, Force } Add or remove space after reference sign '&', if followed by a word.
sp_after_byref_func                = Remove # { Ignore, Add, Remove, Force } Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_before_byref_func               = Force  # { Ignore, Add, Remove, Force } Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_after_type                      = Force  # { Ignore, Add, Remove, Force } Add or remove space between type and word. Default=Force.
# sp_before_template_paren           =        # { Ignore, Add, Remove, Force } Add or remove space before the paren in the D constructs 'template Foo(' and 'class Foo('.
# sp_template_angle                  =        # { Ignore, Add, Remove, Force } Add or remove space in 'template <' vs 'template<'.} If set to ignore, sp_before_angle is used.
# sp_before_angle                    =        # { Ignore, Add, Remove, Force } Add or remove space before '<>'.
# sp_inside_angle                    =        # { Ignore, Add, Remove, Force } Add or remove space inside '<' and '>'.
# sp_angle_colon                     =        # { Ignore, Add, Remove, Force } Add or remove space between '<>' and ':'.
# sp_after_angle                     =        # { Ignore, Add, Remove, Force } Add or remove space after '<>'.
# sp_angle_paren                     =        # { Ignore, Add, Remove, Force } Add or remove space between '<>' and '(' as found in 'new List<byte>(foo);'.
# sp_angle_paren_empty               =        # { Ignore, Add, Remove, Force } Add or remove space between '<>' and '()' as found in 'new List<byte>();'.
# sp_angle_word                      =        # { Ignore, Add, Remove, Force } Add or remove space between '<>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'.
# sp_angle_shift                     =        # { Ignore, Add, Remove, Force } Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add.
# sp_permit_cpp11_shift              =        # { False, True } Permit removal of the space between '>>' in 'foo<bar<int> >' (C++11 only). Default=False. sp_angle_shift cannot remove the space without this option.
sp_before_sparen                   = Force  # { Ignore, Add, Remove, Force } Add or remove space before '(' of 'if', 'for', 'switch', 'while', etc.
sp_inside_sparen                   = Remove # { Ignore, Add, Remove, Force } Add or remove space inside if-condition '(' and ')'.
# sp_inside_sparen_close             =        # { Ignore, Add, Remove, Force } Add or remove space before if-condition ')'. Overrides sp_inside_sparen.
# sp_inside_sparen_open              =        # { Ignore, Add, Remove, Force } Add or remove space after if-condition '('. Overrides sp_inside_sparen.
sp_after_sparen                    = Force  # { Ignore, Add, Remove, Force } Add or remove space after ')' of 'if', 'for', 'switch', and 'while', etc.
sp_sparen_brace                    = Force  # { Ignore, Add, Remove, Force } Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while', etc.
# sp_invariant_paren                 =        # { Ignore, Add, Remove, Force } Add or remove space between 'invariant' and '(' in the D language.
# sp_after_invariant_paren           =        # { Ignore, Add, Remove, Force } Add or remove space after the ')' in 'invariant (C) c' in the D language.
sp_special_semi                    = Remove # { Ignore, Add, Remove, Force } Add or remove space before empty statement ';' on 'if', 'for' and 'while'.
sp_before_semi                     = Remove # { Ignore, Add, Remove, Force } Add or remove space before ';'. Default=Remove.
sp_before_semi_for                 = Remove # { Ignore, Add, Remove, Force } Add or remove space before ';' in non-empty 'for' statements.
sp_before_semi_for_empty           = Remove # { Ignore, Add, Remove, Force } Add or remove space before a semicolon of an empty part of a for statement.
sp_after_semi                      = Add   # { Ignore, Add, Remove, Force } Add or remove space after ';', except when followed by a comment. Default=Add.
sp_after_semi_for                  = Force  # { Ignore, Add, Remove, Force } Add or remove space after ';' in non-empty 'for' statements. Default=Force.
sp_after_semi_for_empty            = Remove # { Ignore, Add, Remove, Force } Add or remove space after the final semicolon of an empty part of a for statement: for ( ; ; <here> ).
sp_before_square                   = Remove # { Ignore, Add, Remove, Force } Add or remove space before '[' (except '[]').
sp_before_squares                  = Remove # { Ignore, Add, Remove, Force } Add or remove space before '[]'.
sp_inside_square                   = Remove # { Ignore, Add, Remove, Force } Add or remove space inside a non-empty '[' and ']'.
sp_after_comma                     = Force  # { Ignore, Add, Remove, Force } Add or remove space after ',', 'a,b' vs 'a, b'.
sp_before_comma                    = Remove # { Ignore, Add, Remove, Force } Add or remove space before ','. Default=Remove.
# sp_after_mdatype_commas            =        # { Ignore, Add, Remove, Force } Add or remove space between ',' and ']' in multidimensional array type 'int[,,]'. Only for C#.
# sp_before_mdatype_commas           =        # { Ignore, Add, Remove, Force } Add or remove space between '[' and ',' in multidimensional array type 'int[,,]'. Only for C#.
# sp_between_mdatype_commas          =        # { Ignore, Add, Remove, Force } Add or remove space between ',' in multidimensional array type 'int[,,]'. Only for C#.
# sp_paren_comma                     =        # { Ignore, Add, Remove, Force } Add or remove space between an open paren and comma: '(,' vs '( ,'. Default=Force.
sp_before_ellipsis                 = Force # { Ignore, Add, Remove, Force } Add or remove space before the variadic '...' when preceded by a non-punctuator.
# sp_after_class_colon               =        # { Ignore, Add, Remove, Force } Add or remove space after class ':'.
# sp_before_class_colon              =        # { Ignore, Add, Remove, Force } Add or remove space before class ':'.
# sp_after_constr_colon              =        # { Ignore, Add, Remove, Force } Add or remove space after class constructor ':'.
# sp_before_constr_colon             =        # { Ignore, Add, Remove, Force } Add or remove space before class constructor ':'.
sp_before_case_colon               = Remove # { Ignore, Add, Remove, Force } Add or remove space before case ':'. Default=Remove.
sp_after_operator                  = Remove # { Ignore, Add, Remove, Force } Add or remove space between 'operator' and operator sign.
sp_after_operator_sym              = Remove # { Ignore, Add, Remove, Force } Add or remove space between the operator symbol and the open paren, as in 'operator ++('.
# sp_after_operator_sym_empty        = Remove # { Ignore, Add, Remove, Force } Overrides sp_after_operator_sym when the operator has no arguments, as in 'operator *()'.
sp_after_cast                      = Remove # { Ignore, Add, Remove, Force } Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'.
sp_inside_paren_cast               = Remove # { Ignore, Add, Remove, Force } Add or remove spaces inside cast parens.
# sp_cpp_cast_paren                  =        # { Ignore, Add, Remove, Force } Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'.
sp_sizeof_paren                    = Remove # { Ignore, Add, Remove, Force } Add or remove space between 'sizeof' and '('.
# sp_after_tag                       =        # { Ignore, Add, Remove, Force } Add or remove space after the tag keyword (Pawn).
sp_inside_braces_enum              = Remove # { Ignore, Add, Remove, Force } Add or remove space inside enum '{' and '}'.
sp_inside_braces_struct            = Remove # { Ignore, Add, Remove, Force } Add or remove space inside struct/union '{' and '}'.
sp_after_type_brace_init_lst_open  = Remove # { Ignore, Add, Remove, Force } Add or remove space after open brace in an unnamed temporary direct-list-initialization.
sp_before_type_brace_init_lst_close= Remove # { Ignore, Add, Remove, Force } Add or remove space before close brace in an unnamed temporary direct-list-initialization.
sp_inside_type_brace_init_lst      = Remove # { Ignore, Add, Remove, Force } Add or remove space inside an unnamed temporary direct-list-initialization.
sp_inside_braces                   = Remove # { Ignore, Add, Remove, Force } Add or remove space inside '{' and '}'.
sp_inside_braces_empty             = Remove # { Ignore, Add, Remove, Force } Add or remove space inside '{}'.
sp_type_func                       = Force  # { Ignore, Add, Remove, Force } Add or remove space between return type and function name A minimum of 1 is forced except for pointer return types.
sp_type_brace_init_lst             = Force  # { Ignore, Add, Remove, Force } Add or remove space between type and open brace of an unnamed temporary direct-list-initialization.
sp_func_proto_paren                = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '(' on function declaration.
sp_func_proto_paren_empty          = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '()' on function declaration without parameters.
sp_func_def_paren                  = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '(' on function definition.
sp_func_def_paren_empty            = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '()' on function definition without parameters.
sp_inside_fparens                  = Remove # { Ignore, Add, Remove, Force } Add or remove space inside empty function '()'.
sp_inside_fparen                   = Remove # { Ignore, Add, Remove, Force } Add or remove space inside function '(' and ')'.
sp_inside_tparen                   = Remove # { Ignore, Add, Remove, Force } Add or remove space inside the first parens in the function type: 'void (*x)(...)'.
sp_after_tparen_close              = Remove # { Ignore, Add, Remove, Force } Add or remove between the parens in the function type: 'void (*x)(...)'.
sp_square_fparen                   = Remove # { Ignore, Add, Remove, Force } Add or remove space between ']' and '(' when part of a function call.
sp_fparen_brace                    = Force  # { Ignore, Add, Remove, Force } Add or remove space between ')' and '{' of function.
sp_func_call_paren                 = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '(' on function calls.
sp_func_call_paren_empty           = Remove # { Ignore, Add, Remove, Force } Add or remove space between function name and '()' on function calls without parameters. If set to 'ignore' (the default), sp_func_call_paren is used.
# sp_func_call_user_paren            =        # { Ignore, Add, Remove, Force } Add or remove space between the user function name and '(' on function calls You need to set a keyword to be a user function, like this: 'set func_call_user _' in the config file.
# sp_func_class_paren                =        # { Ignore, Add, Remove, Force } Add or remove space between a constructor/destructor and the open paren.
# sp_func_class_paren_empty          =        # { Ignore, Add, Remove, Force } Add or remove space between a constructor without parameters or destructor and '()'.
sp_return_paren                    = Force  # { Ignore, Add, Remove, Force } Add or remove space between 'return' and '('.
sp_attribute_paren                 = Remove # { Ignore, Add, Remove, Force } Add or remove space between '__attribute__' and '('.
sp_defined_paren                   = Force  # { Ignore, Add, Remove, Force } Add or remove space between 'defined' and '(' in '#if defined (FOO)'.
# sp_throw_paren                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'throw' and '(' in 'throw (something)'.
# sp_after_throw                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'throw' and anything other than '(' as in '@throw [...];'.
# sp_catch_paren                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'catch' and '(' in 'catch (something) { }' If set to ignore, sp_before_sparen is used.
# sp_version_paren                   =        # { Ignore, Add, Remove, Force } Add or remove space between 'version' and '(' in 'version (something) { }' (D language) If set to ignore, sp_before_sparen is used.
# sp_scope_paren                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'scope' and '(' in 'scope (something) { }' (D language) If set to ignore, sp_before_sparen is used.
# sp_super_paren                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'super' and '(' in 'super (something)'. Default=Remove.
# sp_this_paren                      =        # { Ignore, Add, Remove, Force } Add or remove space between 'this' and '(' in 'this (something)'. Default=Remove.
sp_macro                           = Force  # { Ignore, Add, Remove, Force } Add or remove space between macro and value.
sp_macro_func                      = Force  # { Ignore, Add, Remove, Force } Add or remove space between macro function ')' and value.
sp_else_brace                      = Force  # { Ignore, Add, Remove, Force } Add or remove space between 'else' and '{' if on the same line.
sp_brace_else                      = Force  # { Ignore, Add, Remove, Force } Add or remove space between '}' and 'else' if on the same line.
sp_brace_typedef                   = Force  # { Ignore, Add, Remove, Force } Add or remove space between '}' and the name of a typedef on the same line.
# sp_catch_brace                     =        # { Ignore, Add, Remove, Force } Add or remove space between 'catch' and '{' if on the same line.
# sp_brace_catch                     =        # { Ignore, Add, Remove, Force } Add or remove space between '}' and 'catch' if on the same line.
# sp_finally_brace                   =        # { Ignore, Add, Remove, Force } Add or remove space between 'finally' and '{' if on the same line.
# sp_brace_finally                   =        # { Ignore, Add, Remove, Force } Add or remove space between '}' and 'finally' if on the same line.
# sp_try_brace                       =        # { Ignore, Add, Remove, Force } Add or remove space between 'try' and '{' if on the same line.
# sp_getset_brace                    =        # { Ignore, Add, Remove, Force } Add or remove space between get/set and '{' if on the same line.
#sp_word_brace                      =        # { Ignore, Add, Remove, Force } Add or remove space between a variable and '{' for C++ uniform initialization. Default=Add.
# sp_word_brace_ns                   =        # { Ignore, Add, Remove, Force } Add or remove space between a variable and '{' for a namespace. Default=Add.
# sp_before_dc                       =        # { Ignore, Add, Remove, Force } Add or remove space before the '::' operator.
# sp_after_dc                        =        # { Ignore, Add, Remove, Force } Add or remove space after the '::' operator.
# sp_d_array_colon                   =        # { Ignore, Add, Remove, Force } Add or remove around the D named array initializer ':' operator.
sp_not                             = Remove # { Ignore, Add, Remove, Force } Add or remove space after the '!' (not) operator. Default=Remove.
sp_inv                             = Remove # { Ignore, Add, Remove, Force } Add or remove space after the '~' (invert) operator. Default=Remove.
sp_addr                            = Remove # { Ignore, Add, Remove, Force } Add or remove space after the '&' (address-of) operator. Default=Remove This does not affect the spacing after a '&' that is part of a type.
sp_member                          = Remove # { Ignore, Add, Remove, Force } Add or remove space around the '.' or '->' operators. Default=Remove.
sp_deref                           = Remove # { Ignore, Add, Remove, Force } Add or remove space after the '*' (dereference) operator. Default=Remove This does not affect the spacing after a '*' that is part of a type.
sp_sign                            = Remove # { Ignore, Add, Remove, Force } Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'. Default=Remove.
sp_incdec                          = Remove # { Ignore, Add, Remove, Force } Add or remove space before or after '++' and '--', as in '(--x)' or 'y++;'. Default=Remove.
sp_before_nl_cont                  = Add    # { Ignore, Add, Remove, Force } Add or remove space before a backslash-newline at the end of a line. Default=Add.
# sp_after_oc_scope                  =        # { Ignore, Add, Remove, Force } Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'.
# sp_after_oc_colon                  =        # { Ignore, Add, Remove, Force } Add or remove space after the colon in message specs '-(int) f:(int) x;' vs '-(int) f: (int) x;'.
# sp_before_oc_colon                 =        # { Ignore, Add, Remove, Force } Add or remove space before the colon in message specs '-(int) f: (int) x;' vs '-(int) f : (int) x;'.
# sp_after_oc_dict_colon             =        # { Ignore, Add, Remove, Force } Add or remove space after the colon in immutable dictionary expression 'NSDictionary *test = @{@"foo" :@"bar"};'.
# sp_before_oc_dict_colon            =        # { Ignore, Add, Remove, Force } Add or remove space before the colon in immutable dictionary expression 'NSDictionary *test = @{@"foo" :@"bar"};'.
# sp_after_send_oc_colon             =        # { Ignore, Add, Remove, Force } Add or remove space after the colon in message specs '[object setValue:1];' vs '[object setValue: 1];'.
# sp_before_send_oc_colon            =        # { Ignore, Add, Remove, Force } Add or remove space before the colon in message specs '[object setValue:1];' vs '[object setValue :1];'.
# sp_after_oc_type                   =        # { Ignore, Add, Remove, Force } Add or remove space after the (type) in message specs '-(int)f: (int) x;' vs '-(int)f: (int)x;'.
# sp_after_oc_return_type            =        # { Ignore, Add, Remove, Force } Add or remove space after the first (type) in message specs '-(int) f:(int)x;' vs '-(int)f:(int)x;'.
# sp_after_oc_at_sel                 =        # { Ignore, Add, Remove, Force } Add or remove space between '@selector' and '(' '@selector(msgName)' vs '@selector (msgName)' Also applies to @protocol() constructs.
# sp_after_oc_at_sel_parens          =        # { Ignore, Add, Remove, Force } Add or remove space between '@selector(x)' and the following word '@selector(foo) a:' vs '@selector(foo)a:'.
# sp_inside_oc_at_sel_parens         =        # { Ignore, Add, Remove, Force } Add or remove space inside '@selector' parens '@selector(foo)' vs '@selector( foo )' Also applies to @protocol() constructs.
# sp_before_oc_block_caret           =        # { Ignore, Add, Remove, Force } Add or remove space before a block pointer caret '^int (int arg){...}' vs. ' ^int (int arg){...}'.
# sp_after_oc_block_caret            =        # { Ignore, Add, Remove, Force } Add or remove space after a block pointer caret '^int (int arg){...}' vs. '^ int (int arg){...}'.
# sp_after_oc_msg_receiver           =        # { Ignore, Add, Remove, Force } Add or remove space between the receiver and selector in a message. '[receiver selector ...]'.
# sp_after_oc_property               =        # { Ignore, Add, Remove, Force } Add or remove space after @property.
sp_cond_colon                      = Force  # { Ignore, Add, Remove, Force } Add or remove space around the ':' in 'b ? t : f'.
# sp_cond_colon_before               =        # { Ignore, Add, Remove, Force } Add or remove space before the ':' in 'b ? t : f'. Overrides sp_cond_colon.
# sp_cond_colon_after                =        # { Ignore, Add, Remove, Force } Add or remove space after the ':' in 'b ? t : f'. Overrides sp_cond_colon.
sp_cond_question                   = Force  # { Ignore, Add, Remove, Force } Add or remove space around the '?' in 'b ? t : f'.
# sp_cond_question_before            =        # { Ignore, Add, Remove, Force } Add or remove space before the '?' in 'b ? t : f'. Overrides sp_cond_question.
# sp_cond_question_after             =        # { Ignore, Add, Remove, Force } Add or remove space after the '?' in 'b ? t : f'. Overrides sp_cond_question.
sp_cond_ternary_short              = Force  # { Ignore, Add, Remove, Force } In the abbreviated ternary form (a ?: b), add/remove space between ? and :.'. Overrides all other sp_cond_* options.
sp_case_label                      = Force  # { Ignore, Add, Remove, Force } Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make sense here.
# sp_range                           =        # { Ignore, Add, Remove, Force } Control the space around the D '..' operator.
# sp_after_for_colon                 =        # { Ignore, Add, Remove, Force } Control the spacing after ':' in 'for (TYPE VAR : EXPR)'. Only JAVA.
# sp_before_for_colon                =        # { Ignore, Add, Remove, Force } Control the spacing before ':' in 'for (TYPE VAR : EXPR)'. Only JAVA.
# sp_extern_paren                    =        # { Ignore, Add, Remove, Force } Control the spacing in 'extern (C)' (D).
sp_cmt_cpp_start                   = Force  # { Ignore, Add, Remove, Force } Control the space after the opening of a C++ comment '// A' vs '//A'.
sp_cmt_cpp_doxygen                 = True   # { False, True } True: If space is added with sp_cmt_cpp_start, do it after doxygen sequences like '///', '///<', '//!' and '//!<'.
sp_cmt_cpp_qttr                    = True   # { False, True } True: If space is added with sp_cmt_cpp_start, do it after Qt translator or meta-data comments like '//:', '//=', and '//~'.
sp_endif_cmt                       = Add    # { Ignore, Add, Remove, Force } Controls the spaces between #else or #endif and a trailing comment.
# sp_after_new                       =        # { Ignore, Add, Remove, Force } Controls the spaces after 'new', 'delete' and 'delete[]'.
# sp_between_new_paren               =        # { Ignore, Add, Remove, Force } Controls the spaces between new and '(' in 'new()'.
# sp_after_newop_paren               =        # { Ignore, Add, Remove, Force } Controls the spaces between ')' and 'type' in 'new(foo) BAR'.
# sp_inside_newop_paren              =        # { Ignore, Add, Remove, Force } Controls the spaces inside paren of the new operator: 'new(foo) BAR'.
# sp_inside_newop_paren_open         =        # { Ignore, Add, Remove, Force } Controls the space after open paren of the new operator: 'new(foo) BAR'. Overrides sp_inside_newop_paren.
# sp_inside_newop_paren_close        =        # { Ignore, Add, Remove, Force } Controls the space before close paren of the new operator: 'new(foo) BAR'. Overrides sp_inside_newop_paren.
sp_before_tr_emb_cmt               = Ignore # { Ignore, Add, Remove, Force } Controls the spaces before a trailing or embedded comment.
# sp_num_before_tr_emb_cmt           =        # Unsigned Number Number of spaces before a trailing or embedded comment.
# sp_annotation_paren                =        # { Ignore, Add, Remove, Force } Control space between a Java annotation and the open paren.
# sp_skip_vbrace_tokens              =        # { False, True } If True, vbrace tokens are dropped to the previous token and skipped.
# force_tab_after_define             =        # { False, True } If True, a <TAB> is inserted after #define.

#
# Indenting
#

indent_columns                     = 4      # Unsigned Number The number of columns to indent per level. Usually 2, 3, 4, or 8. Default=8.
indent_continue                    = 8      # Number The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents. For FreeBSD, this is set to 4. Negative value is absolute and not increased for each '(' level.
indent_param                       = 0      # Unsigned Number The continuation indent for func_*_param if they are true. If non-zero, this overrides the indent.
indent_with_tabs                   = 0      # Unsigned Number How to use tabs when indenting code 0=spaces only 1=indent with tabs to brace level, align with spaces (default) 2=indent and align with tabs, using spaces when not on a tabstop
indent_cmt_with_tabs               = False  # { False, True } Comments that are not a brace level are indented with tabs on a tabstop. Requires indent_with_tabs=2. If false, will use spaces.
indent_align_string                = True   # { False, True } Whether to indent strings broken by '\' so that they line up.
indent_xml_string                  = 2      # Unsigned Number The number of spaces to indent multi-line XML strings. Requires indent_align_string=True.
indent_brace                       = 0      # Unsigned Number Spaces to indent '{' from level.
indent_braces                      = False  # { False, True } Whether braces are indented to the body level.
indent_braces_no_func              = False  # { False, True } Disabled indenting function braces if indent_braces is True.
indent_braces_no_class             = False  # { False, True } Disabled indenting class braces if indent_braces is True.
indent_braces_no_struct            = False  # { False, True } Disabled indenting struct braces if indent_braces is True.
indent_brace_parent                = False  # { False, True } Indent based on the size of the brace parent, i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.
indent_paren_open_brace            = False  # { False, True } Indent based on the paren open instead of the brace open in '({\n', default is to indent by brace.
# indent_cs_delegate_brace           =        # { False, True } indent a C# delegate by another level, default is to not indent by another level.
# indent_namespace                   =        # { False, True } Whether the 'namespace' body is indented.
# indent_namespace_single_indent     =        # { False, True } Only indent one namespace and no sub-namespaces. Requires indent_namespace=True.
# indent_namespace_level             =        # Unsigned Number The number of spaces to indent a namespace block.
# indent_namespace_limit             =        # Unsigned Number If the body of the namespace is longer than this number, it won't be indented. Requires indent_namespace=True. Default=0 (no limit)
indent_extern                        = False  # { False, True } Whether the 'extern "C"' body is indented.
# indent_class                       =        # { False, True } Whether the 'class' body is indented.
# indent_class_colon                 =        # { False, True } Whether to indent the stuff after a leading base class colon.
# indent_class_on_colon              =        # { False, True } Indent based on a class colon instead of the stuff after the colon. Requires indent_class_colon=True. Default=False.
# indent_constr_colon                =        # { False, True } Whether to indent the stuff after a leading class initializer colon.
# indent_ctor_init_leading           =        # Unsigned Number Virtual indent from the ':' for member initializers. Default=2.
# indent_ctor_init                   =        # Number Additional indent for constructor initializer list. Negative values decrease indent down to the first column. Default=0.
indent_else_if                     = True   # { False, True } False=treat 'else\nif' as 'else if' for indenting purposes True=indent the 'if' one level.
indent_var_def_blk                 = 0      # Number Amount to indent variable declarations after a open brace. neg=relative, pos=absolute.
indent_var_def_cont                = True   # { False, True } Indent continued variable declarations instead of aligning.
indent_shift                       = False  # { False, True } Indent continued shift expressions ('<<' and '>>') instead of aligning. Turn align_left_shift off when enabling this.
indent_func_def_force_col1         = False  # { False, True } True:  force indentation of function definition to start in column 1 False: use the default behavior.
indent_func_call_param             = False  # { False, True } True:  indent continued function call parameters one indent level False: align parameters under the open paren.
indent_func_def_param              = True   # { False, True } Same as indent_func_call_param, but for function defs.
indent_func_proto_param            = True   # { False, True } Same as indent_func_call_param, but for function protos.
indent_func_class_param            = True   # { False, True } Same as indent_func_call_param, but for class declarations.
indent_func_ctor_var_param         = True   # { False, True } Same as indent_func_call_param, but for class variable constructors.
indent_template_param              = True   # { False, True } Same as indent_func_call_param, but for templates.
indent_func_param_double           = True   # { False, True } Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param.
indent_func_const                  = 0      # Unsigned Number Indentation column for standalone 'const' function decl/proto qualifier.
indent_func_throw                  = 0      # Unsigned Number Indentation column for standalone 'throw' function decl/proto qualifier.
indent_member                      = 0      # Unsigned Number The number of spaces to indent a continued '->' or '.' Usually set to 0, 1, or indent_columns.
indent_sing_line_comments          = 0      # Unsigned Number Spaces to indent single line ('//') comments on lines before code.
indent_relative_single_line_comments = False # { False, True } If set, will indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column.
indent_switch_case                 = 0      # Unsigned Number Spaces to indent 'case' from 'switch' Usually 0 or indent_columns.
indent_switch_pp                   = False  # { False, True } Whether to indent preproccesor statements inside of switch statements.
indent_case_shift                  = 0      # Unsigned Number Spaces to shift the 'case' line, without affecting any other lines Usually 0.
indent_case_brace                  = 0      # Number Spaces to indent '{' from 'case'. By default, the brace will appear under the 'c' in case. Usually set to 0 or indent_columns. negative value are OK.
indent_col1_comment                = False  # { False, True } Whether to indent comments found in first column.
indent_label                       = 1      # Number How to indent goto labels   >0: absolute column where 1 is the leftmost column  <=0: subtract from brace indent Default=1
# indent_access_spec                 =        # Number Same as indent_label, but for access specifiers that are followed by a colon. Default=1
# indent_access_spec_body            =        # { False, True } Indent the code after an access specifier by one level. If set, this option forces 'indent_access_spec=0'.
indent_paren_nl                    = False  # { False, True } If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended).
indent_paren_close                 = 1      # Unsigned Number Controls the indent of a close paren after a newline. 0: Indent to body level 1: Align under the open paren 2: Indent to the brace level
indent_paren_after_func_def        = False  # { False, True } Controls the indent of the open paren of a function definition, if on it's own line.If True, indents the open paren
indent_paren_after_func_decl       = False  # { False, True } Controls the indent of the open paren of a function declaration, if on it's own line.If True, indents the open paren
indent_paren_after_func_call       = False  # { False, True } Controls the indent of the open paren of a function call, if on it's own line.If True, indents the open paren
indent_comma_paren                 = False  # { False, True } Controls the indent of a comma when inside a paren.If True, aligns under the open paren.
indent_bool_paren                  = False  # { False, True } Controls the indent of a BOOL operator when inside a paren.If True, aligns under the open paren.
# indent_first_bool_expr             =        # { False, True } If 'indent_bool_paren' is True, controls the indent of the first expression. If True, aligns the first expression to the following ones.
indent_square_nl                   = False  # { False, True } If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended).
# indent_preserve_sql                =        # { False, True } Don't change the relative indent of ESQL/C 'EXEC SQL' bodies.
indent_align_assign                = True   # { False, True } Align continued statements at the '='. Default=True If False or the '=' is followed by a newline, the next line is indent one tab.
indent_ternary_operator            = 2      # Unsigned Number indent the continuation of ternary operator. 0: (Default) off 1: When the `if_false` is a continuation, indent it under `if_false` 2: When the `:` is a continuation, indent it under `?`
indent_ignore_asm_block            = True   # { False, True } If true, ignore indent and align for asm blocks as they have their own indentation.

#
# Newline adding and removing options
#

nl_collapse_empty_body             = True   # { False, True } Whether to collapse empty blocks between '{' and '}'.
nl_enum_leave_one_liners           = False  # { False, True } Don't split one-line enums: 'enum foo { BAR = 15 };'
# nl_getset_leave_one_liners         =        # { False, True } Don't split one-line get or set functions.
nl_func_leave_one_liners           = False  # { False, True } Don't split one-line function definitions - 'int foo() { return 0; }'.
nl_if_leave_one_liners             = False  # { False, True } Don't split one-line if/else statements - 'if(a) b++;'.
nl_while_leave_one_liners          = False  # { False, True } Don't split one-line while statements - 'while(a) b++;'.
nl_start_of_file                   = Remove # { Ignore, Add, Remove, Force } Add or remove newlines at the start of the file.
nl_start_of_file_min               = 0      # Unsigned Number The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'.
nl_end_of_file                     = Force  # { Ignore, Add, Remove, Force } Add or remove newline at the end of the file.
nl_end_of_file_min                 = 1      # Unsigned Number The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force').
nl_assign_brace                    = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '=' and '{'.
nl_func_var_def_blk                = 1      # Unsigned Number The number of blank lines after a block of variable definitions at the top of a function body 0 = No change (default).
nl_typedef_blk_start               = 1      # Unsigned Number The number of newlines before a block of typedefs 0 = No change (default) is overridden by the option 'nl_after_access_spec'.
nl_typedef_blk_end                 = 1      # Unsigned Number The number of newlines after a block of typedefs 0 = No change (default).
nl_typedef_blk_in                  = 1      # Unsigned Number The maximum consecutive newlines within a block of typedefs 0 = No change (default).
nl_var_def_blk_start               = 0      # Unsigned Number The number of newlines before a block of variable definitions not at the top of a function body 0 = No change (default) is overridden by the option 'nl_after_access_spec'.
nl_var_def_blk_end                 = 1      # Unsigned Number The number of newlines after a block of variable definitions not at the top of a function body 0 = No change (default).
nl_var_def_blk_in                  = 1      # Unsigned Number The maximum consecutive newlines within a block of variable definitions 0 = No change (default).
nl_fcall_brace                     = Remove # { Ignore, Add, Remove, Force } Add or remove newline between a function call's ')' and '{', as in: list_for_each(item, &list) { }.
nl_enum_brace                      = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'enum' and '{'.
nl_struct_brace                    = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'struct and '{'.
nl_union_brace                     = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'union' and '{'.
nl_if_brace                        = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'if' and '{'.
nl_brace_else                      = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '}' and 'else'.
nl_elseif_brace                    = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'else if' and '{' If set to ignore, nl_if_brace is used instead.
nl_else_brace                      = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'else' and '{'.
nl_else_if                         = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'else' and 'if'.
nl_before_if_closing_paren         = Remove # { Ignore, Add, Remove, Force } Add or remove newline before 'if'/'else if' closing parenthesis.
nl_for_brace                       = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'for' and '{'.
# nl_brace_square                    =        # { Ignore, Add, Remove, Force } Add or remove newline between '}' and ']'.
# nl_brace_fparen                    =        # { Ignore, Add, Remove, Force } Add or remove newline between '}' and ')' in a function invocation.
nl_while_brace                     = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'while' and '{'.
nl_do_brace                        = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'do' and '{'.
nl_brace_while                     = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '}' and 'while' of 'do' statement.
nl_switch_brace                    = Remove # { Ignore, Add, Remove, Force } Add or remove newline between 'switch' and '{'.
nl_multi_line_cond                 = False  # { False, True } Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc. Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and nl_catch_brace.
nl_multi_line_define               = True   # { False, True } Force a newline in a define after the macro name for multi-line defines.
nl_before_case                     = False  # { False, True } Whether to put a newline before 'case' statement, not after the first 'case'.
nl_after_case                      = False  # { False, True } Whether to put a newline after 'case' statement.
nl_case_colon_brace                = Remove # { Ignore, Add, Remove, Force } Add or remove a newline between a case ':' and '{'. Overrides nl_after_case.
nl_enum_own_lines                  = Force  # { Ignore, Add, Remove, Force } Add or remove newline before first element, after comma, and after last element in enum.
nl_func_type_name                  = Force  # { Ignore, Add, Remove, Force } Add or remove newline between return type and function name in a function definition.
nl_func_paren                      = Remove # { Ignore, Add, Remove, Force } Add or remove newline between a function name and the opening '(' in the declaration.
nl_func_paren_empty                = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_paren for functions with no parameters.
nl_func_def_paren                  = Remove # { Ignore, Add, Remove, Force } Add or remove newline between a function name and the opening '(' in the definition.
nl_func_def_paren_empty            = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_def_paren for functions with no parameters.
nl_func_call_paren                 = Remove # { Ignore, Add, Remove, Force } Add or remove newline between a function name and the opening '(' in the call
nl_func_call_paren_empty           = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_call_paren for functions with no parameters.
nl_func_decl_start                 = Remove # { Ignore, Add, Remove, Force } Add or remove newline after '(' in a function declaration.
nl_func_def_start                  = Remove # { Ignore, Add, Remove, Force } Add or remove newline after '(' in a function definition.

nl_func_decl_start_single          = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_decl_start when there is only one parameter.
nl_func_def_start_single           = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_def_start when there is only one parameter.
nl_func_decl_start_multi_line      = False  # { False, True } Whether to add newline after '(' in a function declaration if '(' and ')' are in different lines.
nl_func_def_start_multi_line       = False  # { False, True } Whether to add newline after '(' in a function definition if '(' and ')' are in different lines.
nl_func_decl_args                  = Remove # { Ignore, Add, Remove, Force } Add or remove newline after each ',' in a function declaration.
nl_func_def_args                   = Remove # { Ignore, Add, Remove, Force } Add or remove newline after each ',' in a function definition.
nl_func_decl_args_multi_line       = False  # { False, True } Whether to add newline after each ',' in a function declaration if '(' and ')' are in different lines.
nl_func_def_args_multi_line        = False  # { False, True } Whether to add newline after each ',' in a function definition if '(' and ')' are in different lines.
nl_func_decl_end                   = Remove # { Ignore, Add, Remove, Force } Add or remove newline before the ')' in a function declaration.
nl_func_def_end                    = Remove # { Ignore, Add, Remove, Force } Add or remove newline before the ')' in a function definition.
nl_func_decl_end_single            = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_decl_end when there is only one parameter.
nl_func_def_end_single             = Remove # { Ignore, Add, Remove, Force } Overrides nl_func_def_end when there is only one parameter.
nl_func_decl_end_multi_line        = False  # { False, True } Whether to add newline before ')' in a function declaration if '(' and ')' are in different lines.
nl_func_def_end_multi_line         = False  # { False, True } Whether to add newline before ')' in a function definition if '(' and ')' are in different lines.
nl_func_decl_empty                 = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '()' in a function declaration.
nl_func_def_empty                  = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '()' in a function definition.
nl_func_call_empty                 = Remove # { Ignore, Add, Remove, Force } Add or remove newline between '()' in a function call.
nl_func_call_start_multi_line      = False  # { False, True } Whether to add newline after '(' in a function call if '(' and ')' are in different lines.
nl_func_call_args_multi_line       = False  # { False, True } Whether to add newline after each ',' in a function call if '(' and ')' are in different lines.
nl_func_call_end_multi_line        = False  # { False, True } Whether to add newline before ')' in a function call if '(' and ')' are in different lines.
nl_fdef_brace                      = Force  # { Ignore, Add, Remove, Force } Add or remove newline between function signature and '{'.
# nl_cpp_ldef_brace                  =        # { Ignore, Add, Remove, Force } Add or remove newline between C++11 lambda signature and '{'.
nl_return_expr                     = Remove # { Ignore, Add, Remove, Force } Add or remove a newline between the return keyword and return expression.
nl_after_semicolon                 = False  # { False, True } Whether to put a newline after semicolons, except in 'for' statements.
# nl_type_brace_init_lst             =        # { Ignore, Add, Remove, Force } Whether to put a newline after the type in an unnamed temporary direct-list-initialization.
# nl_type_brace_init_lst_open        =        # { Ignore, Add, Remove, Force } Whether to put a newline after open brace in an unnamed temporary direct-list-initialization.
# nl_type_brace_init_lst_close       =        # { Ignore, Add, Remove, Force } Whether to put a newline before close brace in an unnamed temporary direct-list-initialization.
nl_after_brace_open                = False  # { False, True } Whether to put a newline after brace open. This also adds a newline before the matching brace close.
nl_after_brace_open_cmt            = False  # { False, True } If nl_after_brace_open and nl_after_brace_open_cmt are True, a newline is placed between the open brace and a trailing single-line comment.
nl_after_vbrace_open               = False  # { False, True } Whether to put a newline after a virtual brace open with a non-empty body. These occur in un-braced if/while/do/for statement bodies.
nl_after_vbrace_open_empty         = False  # { False, True } Whether to put a newline after a virtual brace open with an empty body. These occur in un-braced if/while/do/for statement bodies.
nl_after_brace_close               = True   # { False, True } Whether to put a newline after a brace close. Does not apply if followed by a necessary ';'.
nl_after_vbrace_close              = False  # { False, True } Whether to put a newline after a virtual brace close. Would add a newline before return in: 'if (foo) a++; return;'.
nl_brace_struct_var                = Force  # { Ignore, Add, Remove, Force } Control the newline between the close brace and 'b' in: 'struct { int a; } b;' Affects enums, unions and structures. If set to ignore, uses nl_after_brace_close.
nl_define_macro                    = True   # { False, True } Whether to alter newlines in '#define' macros.
nl_squeeze_ifdef                   = False  # { False, True } Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'. Does not affect top-level #ifdefs.
nl_squeeze_ifdef_top_level         = False  # { False, True } Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well.
nl_before_if                       = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line before 'if'.
nl_after_if                        = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line after 'if' statement. Add/Force work only if the next token is not a closing brace.
nl_before_for                      = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line before 'for'.
nl_after_for                       = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line after 'for' statement.
nl_before_while                    = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line before 'while'.
nl_after_while                     = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line after 'while' statement.
nl_before_switch                   = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line before 'switch'.
nl_after_switch                    = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line after 'switch' statement.
nl_before_do                       = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line before 'do'.
nl_after_do                        = Ignore # { Ignore, Add, Remove, Force } Add or remove blank line after 'do/while' statement.
nl_ds_struct_enum_cmt              = False  # { False, True } Whether to double-space commented-entries in struct/union/enum.
nl_ds_struct_enum_close_brace      = True   # { False, True } force nl before } of a struct/union/enum (lower priority than 'eat_blanks_before_close_brace').
nl_create_if_one_liner             = False  # { False, True } Change simple unbraced if statements into a one-liner 'if(b)\n i++;' => 'if(b) i++;'.
nl_create_for_one_liner            = False  # { False, True } Change simple unbraced for statements into a one-liner 'for (i=0;i<5;i++)\n foo(i);' => 'for (i=0;i<5;i++) foo(i);'.
nl_create_while_one_liner          = False  # { False, True } Change simple unbraced while statements into a one-liner 'while (i<5)\n foo(i++);' => 'while (i<5) foo(i++);'.
nl_split_if_one_liner              = True   # { False, True } Change a one-liner if statement into simple unbraced if 'if(b) i++;' => 'if(b)\n i++;'.
nl_split_for_one_liner             = True   # { False, True } Change a one-liner for statement into simple unbraced for 'for (i=0;<5;i++) foo(i);' => 'for (i=0;<5;i++)\n foo(i);'.
nl_split_while_one_liner           = True   # { False, True } Change a one-liner while statement into simple unbraced while 'while (i<5) foo(i++);' => 'while (i<5)\n foo(i++);'.

#
# Blank line options
#

nl_max                             = 2      # Unsigned Number The maximum consecutive newlines (3 = 2 blank lines).
nl_max_blank_in_func               = 2      # Unsigned Number The maximum consecutive newlines in function.
nl_after_func_proto                = 2      # Unsigned Number The number of newlines after a function prototype, if followed by another function prototype.
nl_after_func_proto_group          = 2      # Unsigned Number The number of newlines after a function prototype, if not followed by another function prototype.
nl_after_func_class_proto          = 2      # Unsigned Number The number of newlines after a function class prototype, if followed by another function class prototype.
nl_after_func_class_proto_group    = 2      # Unsigned Number The number of newlines after a function class prototype, if not followed by another function class prototype.
nl_before_func_body_def            = 2      # Unsigned Number The number of newlines before a multi-line function def body.
nl_before_func_body_proto          = 2      # Unsigned Number The number of newlines before a multi-line function prototype body.
nl_after_func_body                 = 2      # Unsigned Number The number of newlines after '}' of a multi-line function body.
nl_after_func_body_class           = 2      # Unsigned Number The number of newlines after '}' of a multi-line function body in a class declaration.
nl_after_func_body_one_liner       = 2      # Unsigned Number The number of newlines after '}' of a single line function body.
nl_before_block_comment            = 2      # Unsigned Number The minimum number of newlines before a multi-line comment. Doesn't apply if after a brace open or another multi-line comment.
nl_before_c_comment                = 0      # Unsigned Number The minimum number of newlines before a single-line C comment. Doesn't apply if after a brace open or other single-line C comments.
nl_before_cpp_comment              = 0      # Unsigned Number The minimum number of newlines before a CPP comment. Doesn't apply if after a brace open or other CPP comments.
nl_after_multiline_comment         = True   # { False, True } Whether to force a newline after a multi-line comment.
nl_after_label_colon               = True   # { False, True } Whether to force a newline after a label's colon.
nl_after_struct                    = 1      # Unsigned Number The number of newlines after '}' or ';' of a struct/enum/union definition.
nl_comment_func_def                = 1      # Unsigned Number The number of newlines between a function def and the function comment. 0 = No change.
eat_blanks_after_open_brace        = False  # { False, True } Whether to remove blank lines after '{'.
eat_blanks_before_close_brace      = False  # { False, True } Whether to remove blank lines before '}'.
nl_remove_extra_newlines           = 0      # Unsigned Number How aggressively to remove extra newlines not in preproc. 0: No change 1: Remove most newlines not handled by other config 2: Remove all newlines and reformat completely by config
nl_before_return                   = False  # { False, True } Whether to put a blank line before 'return' statements, unless after an open brace.
nl_after_return                    = False  # { False, True } Whether to put a blank line after 'return' statements, unless followed by a close brace.

#
# Positioning options
#

pos_arith                          = Trail  # { Ignore, Lead, Trail } The position of arithmetic operators in wrapped expressions.
pos_assign                         = Trail  # { Ignore, Lead, Trail } The position of assignment in wrapped expressions. Do not affect '=' followed by '{'.
pos_bool                           = Trail  # { Ignore, Lead, Trail } The position of boolean operators in wrapped expressions.
pos_compare                        = Trail  # { Ignore, Lead, Trail } The position of comparison operators in wrapped expressions.
pos_conditional                    = Trail  # { Ignore, Lead, Trail } The position of conditional (b ? t : f) operators in wrapped expressions.
pos_comma                          = Trail  # { Ignore, Lead, Trail } The position of the comma in wrapped expressions.
pos_enum_comma                     = Trail  # { Ignore, Lead, Trail } The position of the comma in enum entries.
pos_class_comma                    = Trail  # { Ignore, Lead, Trail } The position of the comma in the base class list if there are more than one line,   (tied to nl_class_init_args).
pos_constr_comma                   = Trail  # { Ignore, Lead, Trail } The position of the comma in the constructor initialization list. Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.
pos_class_colon                    = Trail  # { Ignore, Lead, Trail } The position of trailing/leading class colon, between class and base class list   (tied to nl_class_colon).
pos_constr_colon                   = Trail  # { Ignore, Lead, Trail } The position of colons between constructor and member initialization, (tied to nl_constr_colon). Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.

#
# Line Splitting options
#

code_width                         = 150    # Unsigned Number Try to limit code width to N number of columns
ls_for_split_full                  = True   # { False, True } Whether to fully split long 'for' statements at semi-colons.
ls_func_split_full                 = False  # { False, True } Whether to fully split long function protos/calls at commas.
ls_code_width                      = False  # { False, True } Whether to split lines as close to code_width as possible and ignore some groupings.

#
# Code alignment (not left column spaces/tabs)
#

align_keep_tabs                    = False  # { False, True } Whether to keep non-indenting tabs.
align_with_tabs                    = False  # { False, True } Whether to use tabs for aligning.
align_on_tabstop                   = True   # { False, True } Whether to bump out to the next tab when aligning.
align_number_right                 = True   # { False, True } Whether to right-align numbers.
align_keep_extra_space             = False  # { False, True } Whether to keep whitespace not required for alignment.
align_func_params                  = False  # { False, True } Align variable definitions in prototypes and functions.
align_func_params_span             = 0      # Unsigned Number The span for aligning parameter definitions in function on parameter name (0=don't align).
align_func_params_thresh           = 0      # Unsigned Number The threshold for aligning function parameter definitions (0=no limit).
align_func_params_gap              = 1      # Unsigned Number The gap for aligning function parameter definitions.
align_same_func_call_params        = False  # { False, True } Align parameters in single-line functions that have the same name. The function names must already be aligned with each other.
align_var_def_span                 = 0      # Unsigned Number The span for aligning variable definitions (0=don't align)
align_var_def_star_style           = 1      # Unsigned Number How to align the star in variable definitions.  0=Part of the type     'void *   foo;'  1=Part of the variable 'void     *foo;'  2=Dangling             'void    *foo;'
align_var_def_amp_style            = 1      # Unsigned Number How to align the '&' in variable definitions.  0=Part of the type  1=Part of the variable  2=Dangling
align_var_def_thresh               = 0      # Unsigned Number The threshold for aligning variable definitions (0=no limit)
align_var_def_gap                  = 1      # Unsigned Number The gap for aligning variable definitions.
align_var_def_colon                = False  # { False, True } Whether to align the colon in struct bit fields.
align_var_def_colon_gap            = 0      # Unsigned Number align variable defs gap for bit colons.
align_var_def_attribute            = False  # { False, True } Whether to align any attribute after the variable name.
align_var_def_inline               = True   # { False, True } Whether to align inline struct/enum/union variable definitions.
align_assign_span                  = 0      # Unsigned Number The span for aligning on '=' in assignments (0=don't align)
align_assign_thresh                = 0      # Unsigned Number The threshold for aligning on '=' in assignments (0=no limit)
align_enum_equ_span                = 1      # Unsigned Number The span for aligning on '=' in enums (0=don't align)
align_enum_equ_thresh              = 0      # Unsigned Number The threshold for aligning on '=' in enums (0=no limit)
align_var_struct_span              = 1      # Unsigned Number The span for aligning struct/union (0=don't align)
align_var_struct_thresh            = 0      # Unsigned Number The threshold for aligning struct/union member definitions (0=no limit)
align_var_struct_gap               = 1      # Unsigned Number The gap for aligning struct/union member definitions.
align_struct_init_span             = 0      # Unsigned Number The span for aligning struct initializer values (0=don't align)
align_typedef_gap                  = 1      # Unsigned Number The minimum space between the type and the synonym of a typedef.
align_typedef_span                 = 0      # Unsigned Number The span for aligning single-line typedefs (0=don't align).
align_typedef_func                 = 0      # Unsigned Number How to align typedef'd functions with other typedefs 0: Don't mix them at all 1: align the open paren with the types 2: align the function type name with the other type names
align_typedef_star_style           = 1      # Unsigned Number Controls the positioning of the '*' in typedefs. Just try it. 0: Align on typedef type, ignore '*' 1: The '*' is part of type name: typedef int  *pint; 2: The '*' is part of the type, but dangling: typedef int *pint;
align_typedef_amp_style            = 1      # Unsigned Number Controls the positioning of the '&' in typedefs. Just try it. 0: Align on typedef type, ignore '&' 1: The '&' is part of type name: typedef int  &pint; 2: The '&' is part of the type, but dangling: typedef int &pint;
align_right_cmt_span               = 1      # Unsigned Number The span for aligning comments that end lines (0=don't align)
align_right_cmt_mix                = False  # { False, True } If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment.
align_right_cmt_gap                = 1      # Unsigned Number If a trailing comment is more than this number of columns away from the text it follows, it will qualify for being aligned. This has to be > 0 to do anything.
align_right_cmt_at_col             = 0      # Unsigned Number Align trailing comment at or beyond column N; 'pulls in' comments as a bonus side effect (0=ignore)
align_func_proto_span              = 0      # Unsigned Number The span for aligning function prototypes (0=don't align).
align_func_proto_gap               = 1      # Unsigned Number Minimum gap between the return type and the function name.
align_on_operator                  = False  # { False, True } Align function protos on the 'operator' keyword instead of what follows.
align_mix_var_proto                = False  # { False, True } Whether to mix aligning prototype and variable declarations. If True, align_var_def_XXX options are used instead of align_func_proto_XXX options.
align_single_line_func             = False  # { False, True } Align single-line functions with function prototypes, uses align_func_proto_span.
align_single_line_brace            = False  # { False, True } Aligning the open brace of single-line functions. Requires align_single_line_func=True, uses align_func_proto_span.
align_single_line_brace_gap        = 1      # Unsigned Number Gap for align_single_line_brace.
align_nl_cont                      = False  # { False, True } Whether to align macros wrapped with a backslash and a newline. This will not work right if the macro contains a multi-line comment.
align_pp_define_together           = True   # { False, True } # Align macro functions and variables together.
align_pp_define_gap                = 1      # Unsigned Number The minimum space between label and value of a preprocessor define.
align_pp_define_span               = 10     # Unsigned Number The span for aligning on '#define' bodies (0=don't align, other=number of lines including comments between blocks)
align_left_shift                   = True   # { False, True } Align lines that start with '<<' with previous '<<'. Default=True.

#
# Comment modifications
#

cmt_width                          = 120    # Unsigned Number Try to wrap comments at cmt_width columns
cmt_reflow_mode                    = 2      # Unsigned Number Set the comment reflow mode (Default=0) 0: no reflowing (apart from the line wrapping due to cmt_width) 1: no touching at all 2: full reflow
cmt_convert_tab_to_spaces          = True   # { False, True } Whether to convert all tabs to spaces in comments. Default is to leave tabs inside comments alone, unless used for indenting.
cmt_indent_multi                   = True   # { False, True } If False, disable all multi-line comment changes, including cmt_width. keyword substitution and leading chars. Default=True.
cmt_c_group                        = True   # { False, True } Whether to group c-comments that look like they are in a block.
cmt_c_nl_start                     = False  # { False, True } Whether to put an empty '/*' on the first line of the combined c-comment.
cmt_c_nl_end                       = False  # { False, True } Whether to put a newline before the closing '*/' of the combined c-comment.
cmt_cpp_group                      = True   # { False, True } Whether to group cpp-comments that look like they are in a block.
cmt_cpp_nl_start                   = False  # { False, True } Whether to put an empty '/*' on the first line of the combined cpp-comment.
cmt_cpp_nl_end                     = False  # { False, True } Whether to put a newline before the closing '*/' of the combined cpp-comment.
cmt_cpp_to_c                       = True   # { False, True } Whether to change cpp-comments into c-comments.
cmt_star_cont                      = True   # { False, True } Whether to put a star on subsequent comment lines.
cmt_sp_before_star_cont            = 0      # Unsigned Number The number of spaces to insert at the start of subsequent comment lines.
cmt_sp_after_star_cont             = 3      # Number The number of spaces to insert after the star on subsequent comment lines.
cmt_multi_check_last               = True   # { False, True } For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length. Default=True.
cmt_multi_first_len_minimum        = 4      # Unsigned Number For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of the comment are the same length AND if the length is bigger as the first_len minimum. Default=4

#
# Code modifying options (non-whitespace)
#

mod_full_brace_do                  = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line 'do' statement.
mod_full_brace_for                 = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line 'for' statement.
mod_full_brace_function            = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line function definitions. (Pawn).
mod_full_brace_if                  = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
# mod_full_brace_if_chain            =        # { False, True } Make all if/elseif/else statements in a chain be braced or not. Overrides mod_full_brace_if. If any must be braced, they are all braced.  If all can be unbraced, then the braces are removed.
mod_full_brace_if_chain_only       = True   # { False, True } Make all if/elseif/else statements with at least one 'else' or 'else if' fully braced. If mod_full_brace_if_chain is used together with this option, all if-else chains will get braces, and simple 'if' statements will lose them (if possible).
mod_full_brace_nl                  = 0      # Unsigned Number Don't remove braces around statements that span N newlines
mod_full_brace_nl_block_rem_mlcond = False  # { False, True } Blocks removal of braces if the parenthesis of if/for/while/.. span multiple lines.
mod_full_brace_while               = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line 'while' statement.
mod_full_brace_using               = Force  # { Ignore, Add, Remove, Force } Add or remove braces on single-line 'using ()' statement.
mod_paren_on_return                = Remove # { Ignore, Add, Remove, Force } Add or remove unnecessary paren on 'return' statement.
mod_full_paren_if_bool             = True   # { False, True } Add parens on 'while' and 'if' statement around bools.
# mod_remove_extra_semicolon         =        # { False, True } Whether to remove superfluous semicolons.
# mod_add_long_function_closebrace_comment Unsigned Number If a function body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.
# mod_add_long_namespace_closebrace_comment Unsigned Number If a namespace body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.
# mod_add_long_class_closebrace_comment Unsigned Number If a class body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.
# mod_add_long_switch_closebrace_comment Unsigned Number If a switch body exceeds the specified number of newlines and doesn't have a comment after the close brace, a comment will be added.
# mod_add_long_ifdef_endif_comment Unsigned Number If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after the #endif, a comment will be added.
# mod_add_long_ifdef_else_comment    =        # Unsigned Number If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after the #else, a comment will be added.
# mod_sort_import                    =        # { False, True } If True, will sort consecutive single-line 'import' statements [Java, D].
# mod_sort_using                     =        # { False, True } If True, will sort consecutive single-line 'using' statements [C#].
mod_sort_include                   = True   # { False, True } If True, will sort consecutive single-line '#include' statements [C/C++] and '#import' statements [Obj-C] This is generally a bad idea, as it may break your code.
mod_move_case_break                = True   # { False, True } If True, it will move a 'break' that appears after a fully braced 'case' before the close brace.
mod_case_brace                     = Remove # { Ignore, Add, Remove, Force } Will add or remove the braces around a fully braced case statement. Will only remove the braces if there are no variable declarations in the block.
mod_remove_empty_return            = False  # { False, True } If True, it will remove a void 'return;' that appears as the last statement in a function.

#
# Preprocessor options
#

pp_indent                          = Force  # { Ignore, Add, Remove, Force } Control indent of preprocessors inside #if blocks at brace level 0 (file-level).
pp_indent_at_level                 = False   # { False, True } Whether to indent #if/#else/#endif at the brace level (True) or from column 1 (False).
pp_indent_count                    = 0      # Unsigned Number Specifies the number of columns to indent preprocessors per level at brace level 0 (file-level). If pp_indent_at_level=False, specifies the number of columns to indent preprocessors per level at brace level > 0 (function-level). Default=1.
pp_space                           = Force  # { Ignore, Add, Remove, Force } Add or remove space after # based on pp_level of #if blocks.
pp_space_count                     = 0      # Unsigned Number Sets the number of spaces added with pp_space.
pp_indent_if                       = 0      # Number If pp_indent_at_level=True, sets the indent for #if, #else and #endif when not at file-level. 0:  indent preprocessors using output_tab_size. >0: column at which all preprocessors will be indented.
pp_if_indent_code                  = False  # { False, True } Control whether to indent the code between #if, #else and #endif.
pp_define_at_level                 = False  # { False, True } Whether to indent '#define' at the brace level (True) or from column 1 (false).
pp_ignore_define_body              = False  # { False, True } Whether to ignore the '#define' body while formatting.
pp_indent_case                     = True   # { False, True } Whether to indent case statements between #if, #else, and #endif. Only applies to the indent of the preprocesser that the case statements directly inside of.
pp_indent_func_def                 = True   # { False, True } Whether to indent whole function definitions between #if, #else, and #endif. Only applies to the indent of the preprocesser that the function definition is directly inside of.
pp_indent_extern                   = False  # { False, True } Whether to indent extern C blocks between #if, #else, and #endif. Only applies to the indent of the preprocesser that the extern block is directly inside of.
pp_indent_brace                    = True   # { False, True } Whether to indent braces directly inside #if, #else, and #endif. Only applies to the indent of the preprocesser that the braces are directly inside of.

#
# Sort includes options
#

# include_category_0                 =        # String The regex for include category with priority 0.
# include_category_1                 =        # String The regex for include category with priority 1.
# include_category_2                 =        # String The regex for include category with priority 2.

#
# Use or Do not Use options
#

use_indent_func_call_param         = False  # { False, True } True:  indent_func_call_param will be used (default) False: indent_func_call_param will NOT be used.
use_indent_continue_only_once      = False  # { False, True }
#  The value of the indentation for a continuation line is calculate differently if the line is:
#    a declaration :your case with QString fileName ...
#    an assignment  :your case with pSettings = new QSettings( ...
#  At the second case the option value might be used twice:
#    at the assignment
#    at the function call (if present)
#  To prevent the double use of the option value, use this option with the value 'True'.
#  True:  indent_continue will be used only once
#  False: indent_continue will be used every time (default).

# Meaning of the settings:
#   Ignore - do not do any changes
#   Add    - makes sure there is 1 or more space/brace/newline/etc
#   Force  - makes sure there is exactly 1 space/brace/newline/etc,
#            behaves like Add in some contexts
#   Remove - removes space/brace/newline/etc
#
#
# - Token(s) can be treated as specific type(s) with the 'set' option:
#     `set tokenType tokenString [tokenString...]`
#
#     Example:
#       `set BOOL __AND__ __OR__`
#
#     tokenTypes are defined in src/token_enum.h, use them without the
#     'CT_' prefix: 'CT_BOOL' -> 'BOOL'
#
#
# - Token(s) can be treated as type(s) with the 'type' option.
#     `type tokenString [tokenString...]`
#
#     Example:
#       `type int c_uint_8 Rectangle`
#
#     This can also be achieved with `set TYPE int c_uint_8 Rectangle`
#
#
# To embed whitespace in tokenStrings use the '\' escape character, or quote
# the tokenStrings. These quotes are supported: "'`
#
#
# - Support for the auto detection of languages through the file ending can be
#   added using the 'file_ext' command.
#     `file_ext langType langString [langString..]`
#
#     Example:
#       `file_ext CPP .ch .cxx .cpp.in`
#
#     langTypes are defined in uncrusify_types.h in the lang_flag_e enum, use
#     them without the 'LANG_' prefix: 'LANG_CPP' -> 'CPP'
#
#
# - Custom macro-based indentation can be set up using 'macro-open',
#   'macro-else' and 'macro-close'.
#     `(macro-open | macro-else | macro-close) tokenString`
#
#     Example:
#       `macro-open  BEGIN_TEMPLATE_MESSAGE_MAP`
#       `macro-open  BEGIN_MESSAGE_MAP`
#       `macro-close END_MESSAGE_MAP`
#
#
